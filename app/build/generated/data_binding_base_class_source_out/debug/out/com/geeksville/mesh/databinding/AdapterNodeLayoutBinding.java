// Generated by view binder compiler. Do not edit!
package com.geeksville.mesh.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.geeksville.mesh.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AdapterNodeLayoutBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageView batteryIcon;

  @NonNull
  public final TextView batteryPercentageView;

  @NonNull
  public final TextView coordsView;

  @NonNull
  public final TextView distanceView;

  @NonNull
  public final ImageView imageView;

  @NonNull
  public final ImageView lastCommIcon;

  @NonNull
  public final TextView lastConnectionView;

  @NonNull
  public final TextView nodeNameView;

  @NonNull
  public final TextView signalView;

  private AdapterNodeLayoutBinding(@NonNull LinearLayout rootView, @NonNull ImageView batteryIcon,
      @NonNull TextView batteryPercentageView, @NonNull TextView coordsView,
      @NonNull TextView distanceView, @NonNull ImageView imageView, @NonNull ImageView lastCommIcon,
      @NonNull TextView lastConnectionView, @NonNull TextView nodeNameView,
      @NonNull TextView signalView) {
    this.rootView = rootView;
    this.batteryIcon = batteryIcon;
    this.batteryPercentageView = batteryPercentageView;
    this.coordsView = coordsView;
    this.distanceView = distanceView;
    this.imageView = imageView;
    this.lastCommIcon = lastCommIcon;
    this.lastConnectionView = lastConnectionView;
    this.nodeNameView = nodeNameView;
    this.signalView = signalView;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AdapterNodeLayoutBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AdapterNodeLayoutBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.adapter_node_layout, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AdapterNodeLayoutBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.batteryIcon;
      ImageView batteryIcon = rootView.findViewById(id);
      if (batteryIcon == null) {
        break missingId;
      }

      id = R.id.batteryPercentageView;
      TextView batteryPercentageView = rootView.findViewById(id);
      if (batteryPercentageView == null) {
        break missingId;
      }

      id = R.id.coords_view;
      TextView coordsView = rootView.findViewById(id);
      if (coordsView == null) {
        break missingId;
      }

      id = R.id.distance_view;
      TextView distanceView = rootView.findViewById(id);
      if (distanceView == null) {
        break missingId;
      }

      id = R.id.imageView;
      ImageView imageView = rootView.findViewById(id);
      if (imageView == null) {
        break missingId;
      }

      id = R.id.lastCommIcon;
      ImageView lastCommIcon = rootView.findViewById(id);
      if (lastCommIcon == null) {
        break missingId;
      }

      id = R.id.lastConnectionView;
      TextView lastConnectionView = rootView.findViewById(id);
      if (lastConnectionView == null) {
        break missingId;
      }

      id = R.id.nodeNameView;
      TextView nodeNameView = rootView.findViewById(id);
      if (nodeNameView == null) {
        break missingId;
      }

      id = R.id.signalView;
      TextView signalView = rootView.findViewById(id);
      if (signalView == null) {
        break missingId;
      }

      return new AdapterNodeLayoutBinding((LinearLayout) rootView, batteryIcon,
          batteryPercentageView, coordsView, distanceView, imageView, lastCommIcon,
          lastConnectionView, nodeNameView, signalView);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
