// Generated by view binder compiler. Do not edit!
package com.geeksville.mesh.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import com.geeksville.mesh.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DebugFragmentBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button clearButton;

  @NonNull
  public final MaterialButton closeButton;

  @NonNull
  public final RecyclerView packetsRecyclerview;

  @NonNull
  public final TextView textView3;

  private DebugFragmentBinding(@NonNull ConstraintLayout rootView, @NonNull Button clearButton,
      @NonNull MaterialButton closeButton, @NonNull RecyclerView packetsRecyclerview,
      @NonNull TextView textView3) {
    this.rootView = rootView;
    this.clearButton = clearButton;
    this.closeButton = closeButton;
    this.packetsRecyclerview = packetsRecyclerview;
    this.textView3 = textView3;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DebugFragmentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DebugFragmentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.debug_fragment, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DebugFragmentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.clearButton;
      Button clearButton = rootView.findViewById(id);
      if (clearButton == null) {
        break missingId;
      }

      id = R.id.closeButton;
      MaterialButton closeButton = rootView.findViewById(id);
      if (closeButton == null) {
        break missingId;
      }

      id = R.id.packets_recyclerview;
      RecyclerView packetsRecyclerview = rootView.findViewById(id);
      if (packetsRecyclerview == null) {
        break missingId;
      }

      id = R.id.textView3;
      TextView textView3 = rootView.findViewById(id);
      if (textView3 == null) {
        break missingId;
      }

      return new DebugFragmentBinding((ConstraintLayout) rootView, clearButton, closeButton,
          packetsRecyclerview, textView3);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
