// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: remote_hardware.proto

package com.geeksville.mesh;

public final class RemoteHardware {
  private RemoteHardware() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface HardwareMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:HardwareMessage)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * What type of HardwareMessage is this?
     * </pre>
     *
     * <code>.HardwareMessage.Type typ = 1;</code>
     * @return The enum numeric value on the wire for typ.
     */
    int getTypValue();
    /**
     * <pre>
     * What type of HardwareMessage is this?
     * </pre>
     *
     * <code>.HardwareMessage.Type typ = 1;</code>
     * @return The typ.
     */
    com.geeksville.mesh.RemoteHardware.HardwareMessage.Type getTyp();

    /**
     * <pre>
     * What gpios are we changing. Not used for all MessageTypes, see MessageType for details
     * </pre>
     *
     * <code>uint64 gpio_mask = 2;</code>
     * @return The gpioMask.
     */
    long getGpioMask();

    /**
     * <pre>
     * For gpios that were listed in gpio_mask as valid, what are the signal levels for those gpios.
     * Not used for all MessageTypes, see MessageType for details
     * </pre>
     *
     * <code>uint64 gpio_value = 3;</code>
     * @return The gpioValue.
     */
    long getGpioValue();
  }
  /**
   * <pre>
   * An example app to show off the plugin system. This message is used for 
   * REMOTE_HARDWARE_APP PortNums.
   * Also provides easy remote access to any GPIO.
   * In the future other remote hardware operations can be added based on user interest
   * (i.e. serial output, spi/i2c input/output).
   * FIXME - currently this feature is turned on by default which is dangerous
   * because no security yet (beyond the channel mechanism).
   * It should be off by default and then protected based on some TBD mechanism
   * (a special channel once multichannel support is included?)
   * </pre>
   *
   * Protobuf type {@code HardwareMessage}
   */
  public static final class HardwareMessage extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:HardwareMessage)
      HardwareMessageOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HardwareMessage.newBuilder() to construct.
    private HardwareMessage(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HardwareMessage() {
      typ_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new HardwareMessage();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private HardwareMessage(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int rawValue = input.readEnum();

              typ_ = rawValue;
              break;
            }
            case 16: {

              gpioMask_ = input.readUInt64();
              break;
            }
            case 24: {

              gpioValue_ = input.readUInt64();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.geeksville.mesh.RemoteHardware.internal_static_HardwareMessage_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.geeksville.mesh.RemoteHardware.internal_static_HardwareMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.geeksville.mesh.RemoteHardware.HardwareMessage.class, com.geeksville.mesh.RemoteHardware.HardwareMessage.Builder.class);
    }

    /**
     * Protobuf enum {@code HardwareMessage.Type}
     */
    public enum Type
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <pre>
       * Unset/unused
       * </pre>
       *
       * <code>UNSET = 0;</code>
       */
      UNSET(0),
      /**
       * <pre>
       * Set gpio gpios based on gpio_mask/gpio_value
       * </pre>
       *
       * <code>WRITE_GPIOS = 1;</code>
       */
      WRITE_GPIOS(1),
      /**
       * <pre>
       * We are now interested in watching the gpio_mask gpios.
       * If the selected gpios change, please broadcast GPIOS_CHANGED.
       * Will implicitly change the gpios requested to be INPUT gpios.
       * </pre>
       *
       * <code>WATCH_GPIOS = 2;</code>
       */
      WATCH_GPIOS(2),
      /**
       * <pre>
       * The gpios listed in gpio_mask have changed, the new values are listed in gpio_value
       * </pre>
       *
       * <code>GPIOS_CHANGED = 3;</code>
       */
      GPIOS_CHANGED(3),
      /**
       * <pre>
       * Read the gpios specified in gpio_mask, send back a READ_GPIOS_REPLY reply with gpio_value populated
       * </pre>
       *
       * <code>READ_GPIOS = 4;</code>
       */
      READ_GPIOS(4),
      /**
       * <pre>
       * A reply to READ_GPIOS. gpio_mask and gpio_value will be populated
       * </pre>
       *
       * <code>READ_GPIOS_REPLY = 5;</code>
       */
      READ_GPIOS_REPLY(5),
      UNRECOGNIZED(-1),
      ;

      /**
       * <pre>
       * Unset/unused
       * </pre>
       *
       * <code>UNSET = 0;</code>
       */
      public static final int UNSET_VALUE = 0;
      /**
       * <pre>
       * Set gpio gpios based on gpio_mask/gpio_value
       * </pre>
       *
       * <code>WRITE_GPIOS = 1;</code>
       */
      public static final int WRITE_GPIOS_VALUE = 1;
      /**
       * <pre>
       * We are now interested in watching the gpio_mask gpios.
       * If the selected gpios change, please broadcast GPIOS_CHANGED.
       * Will implicitly change the gpios requested to be INPUT gpios.
       * </pre>
       *
       * <code>WATCH_GPIOS = 2;</code>
       */
      public static final int WATCH_GPIOS_VALUE = 2;
      /**
       * <pre>
       * The gpios listed in gpio_mask have changed, the new values are listed in gpio_value
       * </pre>
       *
       * <code>GPIOS_CHANGED = 3;</code>
       */
      public static final int GPIOS_CHANGED_VALUE = 3;
      /**
       * <pre>
       * Read the gpios specified in gpio_mask, send back a READ_GPIOS_REPLY reply with gpio_value populated
       * </pre>
       *
       * <code>READ_GPIOS = 4;</code>
       */
      public static final int READ_GPIOS_VALUE = 4;
      /**
       * <pre>
       * A reply to READ_GPIOS. gpio_mask and gpio_value will be populated
       * </pre>
       *
       * <code>READ_GPIOS_REPLY = 5;</code>
       */
      public static final int READ_GPIOS_REPLY_VALUE = 5;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Type valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Type forNumber(int value) {
        switch (value) {
          case 0: return UNSET;
          case 1: return WRITE_GPIOS;
          case 2: return WATCH_GPIOS;
          case 3: return GPIOS_CHANGED;
          case 4: return READ_GPIOS;
          case 5: return READ_GPIOS_REPLY;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Type>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Type> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Type>() {
              public Type findValueByNumber(int number) {
                return Type.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalStateException(
              "Can't get the descriptor of an unrecognized enum value.");
        }
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.geeksville.mesh.RemoteHardware.HardwareMessage.getDescriptor().getEnumTypes().get(0);
      }

      private static final Type[] VALUES = values();

      public static Type valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Type(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:HardwareMessage.Type)
    }

    public static final int TYP_FIELD_NUMBER = 1;
    private int typ_;
    /**
     * <pre>
     * What type of HardwareMessage is this?
     * </pre>
     *
     * <code>.HardwareMessage.Type typ = 1;</code>
     * @return The enum numeric value on the wire for typ.
     */
    @java.lang.Override public int getTypValue() {
      return typ_;
    }
    /**
     * <pre>
     * What type of HardwareMessage is this?
     * </pre>
     *
     * <code>.HardwareMessage.Type typ = 1;</code>
     * @return The typ.
     */
    @java.lang.Override public com.geeksville.mesh.RemoteHardware.HardwareMessage.Type getTyp() {
      @SuppressWarnings("deprecation")
      com.geeksville.mesh.RemoteHardware.HardwareMessage.Type result = com.geeksville.mesh.RemoteHardware.HardwareMessage.Type.valueOf(typ_);
      return result == null ? com.geeksville.mesh.RemoteHardware.HardwareMessage.Type.UNRECOGNIZED : result;
    }

    public static final int GPIO_MASK_FIELD_NUMBER = 2;
    private long gpioMask_;
    /**
     * <pre>
     * What gpios are we changing. Not used for all MessageTypes, see MessageType for details
     * </pre>
     *
     * <code>uint64 gpio_mask = 2;</code>
     * @return The gpioMask.
     */
    @java.lang.Override
    public long getGpioMask() {
      return gpioMask_;
    }

    public static final int GPIO_VALUE_FIELD_NUMBER = 3;
    private long gpioValue_;
    /**
     * <pre>
     * For gpios that were listed in gpio_mask as valid, what are the signal levels for those gpios.
     * Not used for all MessageTypes, see MessageType for details
     * </pre>
     *
     * <code>uint64 gpio_value = 3;</code>
     * @return The gpioValue.
     */
    @java.lang.Override
    public long getGpioValue() {
      return gpioValue_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (typ_ != com.geeksville.mesh.RemoteHardware.HardwareMessage.Type.UNSET.getNumber()) {
        output.writeEnum(1, typ_);
      }
      if (gpioMask_ != 0L) {
        output.writeUInt64(2, gpioMask_);
      }
      if (gpioValue_ != 0L) {
        output.writeUInt64(3, gpioValue_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (typ_ != com.geeksville.mesh.RemoteHardware.HardwareMessage.Type.UNSET.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, typ_);
      }
      if (gpioMask_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, gpioMask_);
      }
      if (gpioValue_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(3, gpioValue_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.geeksville.mesh.RemoteHardware.HardwareMessage)) {
        return super.equals(obj);
      }
      com.geeksville.mesh.RemoteHardware.HardwareMessage other = (com.geeksville.mesh.RemoteHardware.HardwareMessage) obj;

      if (typ_ != other.typ_) return false;
      if (getGpioMask()
          != other.getGpioMask()) return false;
      if (getGpioValue()
          != other.getGpioValue()) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYP_FIELD_NUMBER;
      hash = (53 * hash) + typ_;
      hash = (37 * hash) + GPIO_MASK_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getGpioMask());
      hash = (37 * hash) + GPIO_VALUE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getGpioValue());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.geeksville.mesh.RemoteHardware.HardwareMessage parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.geeksville.mesh.RemoteHardware.HardwareMessage parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.geeksville.mesh.RemoteHardware.HardwareMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.geeksville.mesh.RemoteHardware.HardwareMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.geeksville.mesh.RemoteHardware.HardwareMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.geeksville.mesh.RemoteHardware.HardwareMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.geeksville.mesh.RemoteHardware.HardwareMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.geeksville.mesh.RemoteHardware.HardwareMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.geeksville.mesh.RemoteHardware.HardwareMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.geeksville.mesh.RemoteHardware.HardwareMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.geeksville.mesh.RemoteHardware.HardwareMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.geeksville.mesh.RemoteHardware.HardwareMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.geeksville.mesh.RemoteHardware.HardwareMessage prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * An example app to show off the plugin system. This message is used for 
     * REMOTE_HARDWARE_APP PortNums.
     * Also provides easy remote access to any GPIO.
     * In the future other remote hardware operations can be added based on user interest
     * (i.e. serial output, spi/i2c input/output).
     * FIXME - currently this feature is turned on by default which is dangerous
     * because no security yet (beyond the channel mechanism).
     * It should be off by default and then protected based on some TBD mechanism
     * (a special channel once multichannel support is included?)
     * </pre>
     *
     * Protobuf type {@code HardwareMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:HardwareMessage)
        com.geeksville.mesh.RemoteHardware.HardwareMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.geeksville.mesh.RemoteHardware.internal_static_HardwareMessage_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.geeksville.mesh.RemoteHardware.internal_static_HardwareMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.geeksville.mesh.RemoteHardware.HardwareMessage.class, com.geeksville.mesh.RemoteHardware.HardwareMessage.Builder.class);
      }

      // Construct using com.geeksville.mesh.RemoteHardware.HardwareMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        typ_ = 0;

        gpioMask_ = 0L;

        gpioValue_ = 0L;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.geeksville.mesh.RemoteHardware.internal_static_HardwareMessage_descriptor;
      }

      @java.lang.Override
      public com.geeksville.mesh.RemoteHardware.HardwareMessage getDefaultInstanceForType() {
        return com.geeksville.mesh.RemoteHardware.HardwareMessage.getDefaultInstance();
      }

      @java.lang.Override
      public com.geeksville.mesh.RemoteHardware.HardwareMessage build() {
        com.geeksville.mesh.RemoteHardware.HardwareMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.geeksville.mesh.RemoteHardware.HardwareMessage buildPartial() {
        com.geeksville.mesh.RemoteHardware.HardwareMessage result = new com.geeksville.mesh.RemoteHardware.HardwareMessage(this);
        result.typ_ = typ_;
        result.gpioMask_ = gpioMask_;
        result.gpioValue_ = gpioValue_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.geeksville.mesh.RemoteHardware.HardwareMessage) {
          return mergeFrom((com.geeksville.mesh.RemoteHardware.HardwareMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.geeksville.mesh.RemoteHardware.HardwareMessage other) {
        if (other == com.geeksville.mesh.RemoteHardware.HardwareMessage.getDefaultInstance()) return this;
        if (other.typ_ != 0) {
          setTypValue(other.getTypValue());
        }
        if (other.getGpioMask() != 0L) {
          setGpioMask(other.getGpioMask());
        }
        if (other.getGpioValue() != 0L) {
          setGpioValue(other.getGpioValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.geeksville.mesh.RemoteHardware.HardwareMessage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.geeksville.mesh.RemoteHardware.HardwareMessage) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int typ_ = 0;
      /**
       * <pre>
       * What type of HardwareMessage is this?
       * </pre>
       *
       * <code>.HardwareMessage.Type typ = 1;</code>
       * @return The enum numeric value on the wire for typ.
       */
      @java.lang.Override public int getTypValue() {
        return typ_;
      }
      /**
       * <pre>
       * What type of HardwareMessage is this?
       * </pre>
       *
       * <code>.HardwareMessage.Type typ = 1;</code>
       * @param value The enum numeric value on the wire for typ to set.
       * @return This builder for chaining.
       */
      public Builder setTypValue(int value) {
        
        typ_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * What type of HardwareMessage is this?
       * </pre>
       *
       * <code>.HardwareMessage.Type typ = 1;</code>
       * @return The typ.
       */
      @java.lang.Override
      public com.geeksville.mesh.RemoteHardware.HardwareMessage.Type getTyp() {
        @SuppressWarnings("deprecation")
        com.geeksville.mesh.RemoteHardware.HardwareMessage.Type result = com.geeksville.mesh.RemoteHardware.HardwareMessage.Type.valueOf(typ_);
        return result == null ? com.geeksville.mesh.RemoteHardware.HardwareMessage.Type.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * What type of HardwareMessage is this?
       * </pre>
       *
       * <code>.HardwareMessage.Type typ = 1;</code>
       * @param value The typ to set.
       * @return This builder for chaining.
       */
      public Builder setTyp(com.geeksville.mesh.RemoteHardware.HardwareMessage.Type value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        typ_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * What type of HardwareMessage is this?
       * </pre>
       *
       * <code>.HardwareMessage.Type typ = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTyp() {
        
        typ_ = 0;
        onChanged();
        return this;
      }

      private long gpioMask_ ;
      /**
       * <pre>
       * What gpios are we changing. Not used for all MessageTypes, see MessageType for details
       * </pre>
       *
       * <code>uint64 gpio_mask = 2;</code>
       * @return The gpioMask.
       */
      @java.lang.Override
      public long getGpioMask() {
        return gpioMask_;
      }
      /**
       * <pre>
       * What gpios are we changing. Not used for all MessageTypes, see MessageType for details
       * </pre>
       *
       * <code>uint64 gpio_mask = 2;</code>
       * @param value The gpioMask to set.
       * @return This builder for chaining.
       */
      public Builder setGpioMask(long value) {
        
        gpioMask_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * What gpios are we changing. Not used for all MessageTypes, see MessageType for details
       * </pre>
       *
       * <code>uint64 gpio_mask = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearGpioMask() {
        
        gpioMask_ = 0L;
        onChanged();
        return this;
      }

      private long gpioValue_ ;
      /**
       * <pre>
       * For gpios that were listed in gpio_mask as valid, what are the signal levels for those gpios.
       * Not used for all MessageTypes, see MessageType for details
       * </pre>
       *
       * <code>uint64 gpio_value = 3;</code>
       * @return The gpioValue.
       */
      @java.lang.Override
      public long getGpioValue() {
        return gpioValue_;
      }
      /**
       * <pre>
       * For gpios that were listed in gpio_mask as valid, what are the signal levels for those gpios.
       * Not used for all MessageTypes, see MessageType for details
       * </pre>
       *
       * <code>uint64 gpio_value = 3;</code>
       * @param value The gpioValue to set.
       * @return This builder for chaining.
       */
      public Builder setGpioValue(long value) {
        
        gpioValue_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * For gpios that were listed in gpio_mask as valid, what are the signal levels for those gpios.
       * Not used for all MessageTypes, see MessageType for details
       * </pre>
       *
       * <code>uint64 gpio_value = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearGpioValue() {
        
        gpioValue_ = 0L;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:HardwareMessage)
    }

    // @@protoc_insertion_point(class_scope:HardwareMessage)
    private static final com.geeksville.mesh.RemoteHardware.HardwareMessage DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.geeksville.mesh.RemoteHardware.HardwareMessage();
    }

    public static com.geeksville.mesh.RemoteHardware.HardwareMessage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<HardwareMessage>
        PARSER = new com.google.protobuf.AbstractParser<HardwareMessage>() {
      @java.lang.Override
      public HardwareMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new HardwareMessage(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<HardwareMessage> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HardwareMessage> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.geeksville.mesh.RemoteHardware.HardwareMessage getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_HardwareMessage_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_HardwareMessage_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025remote_hardware.proto\"\312\001\n\017HardwareMess" +
      "age\022\"\n\003typ\030\001 \001(\0162\025.HardwareMessage.Type\022" +
      "\021\n\tgpio_mask\030\002 \001(\004\022\022\n\ngpio_value\030\003 \001(\004\"l" +
      "\n\004Type\022\t\n\005UNSET\020\000\022\017\n\013WRITE_GPIOS\020\001\022\017\n\013WA" +
      "TCH_GPIOS\020\002\022\021\n\rGPIOS_CHANGED\020\003\022\016\n\nREAD_G" +
      "PIOS\020\004\022\024\n\020READ_GPIOS_REPLY\020\005BJ\n\023com.geek" +
      "sville.meshB\016RemoteHardwareH\003Z!github.co" +
      "m/meshtastic/gomeshprotob\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
    internal_static_HardwareMessage_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_HardwareMessage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_HardwareMessage_descriptor,
        new java.lang.String[] { "Typ", "GpioMask", "GpioValue", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
